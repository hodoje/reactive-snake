{"version":3,"sources":["containers/Menu/Menu.module.css","components/RangeSlider/RangeSlider.module.css","components/ControlForm/ControlForm.module.css","components/Countdown/Countdown.module.css","containers/Snake/Snake.module.css","assets/img/background.png","containers/Game/Game.module.css","hoc/Auxiliary.js","components/RangeSlider/RangeSlider.js","shared/gameSettings.js","shared/utility.js","components/ControlForm/ControlForm.js","components/Countdown/Countdown.js","containers/Menu/Menu.js","store/actions/actions.js","store/actions/actionTypes.js","hooks/useCanvas.js","components/Canvas/Canvas.js","containers/Snake/Models/point.js","containers/Snake/Models/food.js","containers/Snake/Models/snake.js","containers/Snake/Snake.js","containers/Game/Game.js","App.js","serviceWorker.js","store/reducers/gameReducer.js","store/reducers/controlsReducer.js","index.js"],"names":["module","exports","Aux","props","children","RangeSlider","background","labels","min","max","step","width","height","initialValue","onChange","style","boxShadow","className","classes","SlideContainer","SliderLabelsContainer","map","l","key","SliderLabel","type","Slider","defaultValue","generalSettings","Object","freeze","canvasWidth","canvasHeight","scale","stroke","bonusFoodSpawnInterval","bonusFoodSpawnDuration","figureStyles","head","fill","body","food","bonusFood","wall","gameModes","easy","name","value","medium","hard","speedSettings","speed","points","wallSettings","walls","updateObject","oldObject","updatedProperties","keyboard","BACKSPACE","TAB","ENTER","SHIFT","CTRL","ALT","PAUSE","CAPS_LOCK","ESCAPE","SPACE","PAGE_UP","PAGE_DOWN","END","HOME","LEFT_ARROW","UP_ARROW","RIGHT_ARROW","DOWN_ARROW","INSERT","DELETE","KEY_0","KEY_1","KEY_2","KEY_3","KEY_4","KEY_5","KEY_6","KEY_7","KEY_8","KEY_9","KEY_A","KEY_B","KEY_C","KEY_D","KEY_E","KEY_F","KEY_G","KEY_H","KEY_I","KEY_J","KEY_K","KEY_L","KEY_M","KEY_N","KEY_O","KEY_P","KEY_Q","KEY_R","KEY_S","KEY_T","KEY_U","KEY_V","KEY_W","KEY_X","KEY_Y","KEY_Z","SELECT","NUMPAD_0","NUMPAD_1","NUMPAD_2","NUMPAD_3","NUMPAD_4","NUMPAD_5","NUMPAD_6","NUMPAD_7","NUMPAD_8","NUMPAD_9","MULTIPLY","ADD","SUBTRACT","DECIMAL","DIVIDE","F1","F2","F3","F4","F5","F6","F7","F8","F9","F10","F11","F12","NUM_LOCK","SCROLL_LOCK","SEMICOLON","EQUALS","COMMA","DASH","PERIOD","FORWARD_SLASH","GRAVE_ACCENT","OPEN_BRACKET","BACK_SLASH","CLOSE_BRACKET","SINGLE_QUOTE","reversedKeyboard","8","9","13","16","17","18","19","20","27","32","33","34","35","36","37","38","39","40","45","46","48","49","50","51","52","53","54","55","56","57","65","66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","93","96","97","98","99","100","101","102","103","104","105","106","107","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","144","145","186","187","188","189","190","191","192","219","220","221","222","getInnerOuterEdgeColRow","cols","Math","floor","rows","middleCol","middleRow","innerOuterEdgeCol","innerOuterEdgeRow","ControlForm","control","direction","onAssignKey","buttonRef","useRef","setButtonControl","current","innerHTML","keys","useEffect","Form","icon","Direction","Button","onKeyDown","event","keyCode","ref","Input","Countdown","useState","counter","setCounter","timer","setTimeout","callback","clearTimeout","Menu","starting","setStarting","gameOver","useSelector","state","game","initialLoad","currentScore","highscore","isNewHighscore","speedGameMode","wallsGameMode","leftControl","controls","upControl","rightControl","downControl","dispatch","useDispatch","buttonClasses","push","DisabledButton","displayHighscore","Highscore","WhiteText","NoSelect","join","NewHighscore","display","initialDisplay","Heading","gameOverDisplay","CurrentScore","classList","MenuSlideOut","MenuOut","leftControlForm","faArrowLeft","upControlForm","faArrowUp","rightControlForm","faArrowRight","downControlForm","faArrowDown","all","FoodContainer","FoodHolder","Food","DifficultyHeading","SpeedSettings","mode","speedModePick","target","actions","WallsSettings","wallsModePick","ControlsHeading","Controls","faPlay","onClick","useCanvas","draw","options","predraw","postdraw","canvasRef","animationFrameId","frameRate","now","then","elapsed","canvas","context","getContext","requestedFrameRate","window","performance","render","time","requestAnimationFrame","cancelAnimationFrame","_predraw","save","clearRect","_postdraw","restore","Canvas","Point","x","y","this","triggerEndGame","pickFoodLocationRandom","randomCol","random","randomRow","checkIfIsOnTail","snakeTail","isOnSnakeTail","i","length","part","checkIfIsOnWall","wallsMap","isOnWall","checkIfIsOnHead","snakeHead","checkIfFreeFoodLocation","free","pickFoodLocationFromAvailableLocations","location","row","col","pickFoodLocation","newPos","pickLocationAttempt","pickLocationAttemptLimit","setFoodSpawnPoint","show","ctx","shadowBlur","shadowColor","fillStyle","fillRect","SnakeClass","update","isDead","tail","shift","newX","dx","newY","dy","setLastKnownDirection","getDirection","setDirection","newDirection","canMove","lastKnownDirection","eat","eatFood","grow","deathByOutOfBounds","deathByWalls","deathBySuicide","pos","death","getSnakeHead","getSnakeTail","Snake","start","bonusFoodTime","endGame","useCallback","eatBonusFood","snakee","isBonusFoodSpawned","resetBonusFood","Number","MIN_SAFE_INTEGER","Date","pickWallsLocation","percentOfWalls","numberOfWalls","middle","point","randomLocationNearMiddle","randomOuterColDistance","randomOuterRowDistance","horizontal","vertical","randomLocationNearEdge","findIndex","w","snakeGameLifecycle","drawWalls","setup","document","removeEventListener","addEventListener","src","alt","Game","App","Boolean","hostname","match","initialState","bonusFoodPercent","startGame","action","newPoints","bonusPoints","setSpeed","setWalls","setUpControl","setDownControl","setLeftControl","setRightControl","reducer","rootReducer","combineReducers","gameReducer","controlsReducer","store","createStore","compose","applyMiddleware","thunk","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.93d63818.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Menu\":\"Menu_Menu__1_tXN\",\"MenuOut\":\"Menu_MenuOut__o6KpC\",\"MenuSlideOut\":\"Menu_MenuSlideOut__32DQP\",\"left-to-right\":\"Menu_left-to-right__6-5Y_\",\"NoSelect\":\"Menu_NoSelect__Mvcla\",\"CurrentScore\":\"Menu_CurrentScore__1kUaE\",\"Heading\":\"Menu_Heading__3S0CV\",\"Highscore\":\"Menu_Highscore__1VdVw\",\"NewHighscore\":\"Menu_NewHighscore__tIno5\",\"WhiteText\":\"Menu_WhiteText__13okY\",\"Button\":\"Menu_Button__33zyE\",\"pulse\":\"Menu_pulse__1wyKe\",\"DisabledButton\":\"Menu_DisabledButton__1oE3u\",\"Controls\":\"Menu_Controls__1KCC7\",\"ControlsHeading\":\"Menu_ControlsHeading__2d3Xq\",\"DifficultyHeading\":\"Menu_DifficultyHeading__3trqT\",\"SpeedSettings\":\"Menu_SpeedSettings__Abp5d\",\"WallsSettings\":\"Menu_WallsSettings__1uTvk\",\"FoodContainer\":\"Menu_FoodContainer__3TIOs\",\"FoodHolder\":\"Menu_FoodHolder__1vZlO\",\"Food\":\"Menu_Food__2D-tY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"SlideContainer\":\"RangeSlider_SlideContainer__1QNbC\",\"Slider\":\"RangeSlider_Slider__29pdY\",\"SliderLabelsContainer\":\"RangeSlider_SliderLabelsContainer__15yMD\",\"SliderLabel\":\"RangeSlider_SliderLabel__3HTx0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Form\":\"ControlForm_Form__139Ll\",\"Button\":\"ControlForm_Button__r93-E\",\"Direction\":\"ControlForm_Direction__-wXZe\",\"Input\":\"ControlForm_Input__3lTuA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Countdown\":\"Countdown_Countdown__26EMm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Snake\":\"Snake_Snake__1xLHX\"};","module.exports = __webpack_public_path__ + \"static/media/background.0439cea2.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Game\":\"Game_Game__2dFUv\"};","const Aux = props => props.children;\r\n\r\nexport default Aux;","import React from 'react';\r\n\r\nimport classes from './RangeSlider.module.css';\r\nimport Aux from '../../hoc/Auxiliary';\r\n\r\nconst RangeSlider = (props) => {\r\n\r\n    const { background, labels, min, max, step, width, height, initialValue, onChange } = props;\r\n\r\n    const style = {\r\n        background: background,\r\n        width: width,\r\n        height: height,\r\n        boxShadow: `0 0 10px ${background}`,\r\n    }\r\n\r\n    return (\r\n        <div className={classes.SlideContainer}>\r\n            <div \r\n                className={classes.SliderLabelsContainer}\r\n                style={\r\n                    {\r\n                        width: width\r\n                    }\r\n                }>\r\n                <Aux>\r\n                    {labels.map(l => <span key={l} className={classes.SliderLabel}>{l}</span>)}\r\n                </Aux>\r\n            </div>\r\n            <input \r\n                type=\"range\" \r\n                min={min}\r\n                max={max}\r\n                step={step}\r\n                className={classes.Slider}\r\n                defaultValue={initialValue}\r\n                onChange={onChange}\r\n                style={style}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default RangeSlider;","// this can be changed to track number of columns and then set the scale\r\n// ofc you should set these settings to give a round number of either columns\r\n// when it comes to current shape of the settings or round number for scale\r\nexport const generalSettings = Object.freeze(\r\n    {\r\n        canvasWidth: 700,\r\n        canvasHeight: 700,\r\n        scale: 35,\r\n        stroke: 'white',\r\n        bonusFoodSpawnInterval: 15000,\r\n        bonusFoodSpawnDuration: 5000\r\n    }\r\n);\r\n\r\nexport const figureStyles = Object.freeze(\r\n    {\r\n        head: {\r\n            fill: '#93FF19',\r\n            stroke: 'black'\r\n        },\r\n        body: {\r\n            fill: 'white',\r\n            stroke: 'black'\r\n        },\r\n        food: {\r\n            fill: '#FF0080',\r\n            stroke: 'black'\r\n        },\r\n        bonusFood: {\r\n            fill: 'yellow',\r\n            stroke: 'black'\r\n        },\r\n        wall: {\r\n            fill: 'black',\r\n            stroke: 'black'\r\n        }\r\n    }\r\n);\r\n\r\nexport const gameModes = Object.freeze(\r\n    {\r\n        easy: {\r\n            name: 'EASY',\r\n            value: 1\r\n        },\r\n        medium: {\r\n            name: 'MEDIUM',\r\n            value: 2\r\n        },\r\n        hard: {\r\n            name: 'HARD',\r\n            value: 3\r\n        }\r\n    }\r\n);\r\n\r\nexport const speedSettings = Object.freeze(\r\n    {\r\n        easy: {\r\n            speed: 8,\r\n            points: 15\r\n        },\r\n        medium: {\r\n            speed: 10,\r\n            points: 30\r\n        },\r\n        hard: {\r\n            speed: 13,\r\n            points: 50\r\n        }\r\n    }\r\n);\r\n\r\nexport const wallSettings = Object.freeze(\r\n    {\r\n        easy: {\r\n            walls: 0,\r\n            points: 0\r\n        },\r\n        medium: {\r\n            walls: 3,\r\n            points: 35\r\n        },\r\n        hard: {\r\n            walls: 6,\r\n            points: 70\r\n        }\r\n    }\r\n);","export const updateObject = (oldObject, updatedProperties) => {\r\n    return {\r\n        ...oldObject,\r\n        ...updatedProperties\r\n    };\r\n};\r\n\r\nexport const keyboard = {};   \r\nkeyboard.keys = {\r\n    BACKSPACE: 8,\r\n    TAB: 9,\r\n    ENTER: 13,\r\n    SHIFT: 16,\r\n    CTRL: 17,\r\n    ALT: 18,\r\n    PAUSE: 19,\r\n    CAPS_LOCK: 20,\r\n    ESCAPE: 27,\r\n    SPACE: 32,\r\n    PAGE_UP: 33,\r\n    PAGE_DOWN: 34,\r\n    END: 35,\r\n    HOME: 36,\r\n    LEFT_ARROW: 37,\r\n    UP_ARROW: 38,\r\n    RIGHT_ARROW: 39,\r\n    DOWN_ARROW: 40,\r\n    INSERT: 45,\r\n    DELETE: 46,\r\n    KEY_0: 48,\r\n    KEY_1: 49,\r\n    KEY_2: 50,\r\n    KEY_3: 51,\r\n    KEY_4: 52,\r\n    KEY_5: 53,\r\n    KEY_6: 54,\r\n    KEY_7: 55,\r\n    KEY_8: 56,\r\n    KEY_9: 57,\r\n    KEY_A: 65,\r\n    KEY_B: 66,\r\n    KEY_C: 67,\r\n    KEY_D: 68,\r\n    KEY_E: 69,\r\n    KEY_F: 70,\r\n    KEY_G: 71,\r\n    KEY_H: 72,\r\n    KEY_I: 73,\r\n    KEY_J: 74,\r\n    KEY_K: 75,\r\n    KEY_L: 76,\r\n    KEY_M: 77,\r\n    KEY_N: 78,\r\n    KEY_O: 79,\r\n    KEY_P: 80,\r\n    KEY_Q: 81,\r\n    KEY_R: 82,\r\n    KEY_S: 83,\r\n    KEY_T: 84,\r\n    KEY_U: 85,\r\n    KEY_V: 86,\r\n    KEY_W: 87,\r\n    KEY_X: 88,\r\n    KEY_Y: 89,\r\n    KEY_Z: 90,\r\n    SELECT: 93,\r\n    NUMPAD_0: 96,\r\n    NUMPAD_1: 97,\r\n    NUMPAD_2: 98,\r\n    NUMPAD_3: 99,\r\n    NUMPAD_4: 100,\r\n    NUMPAD_5: 101,\r\n    NUMPAD_6: 102,\r\n    NUMPAD_7: 103,\r\n    NUMPAD_8: 104,\r\n    NUMPAD_9: 105,\r\n    MULTIPLY: 106,\r\n    ADD: 107,\r\n    SUBTRACT: 109,\r\n    DECIMAL: 110,\r\n    DIVIDE: 111,\r\n    F1: 112,\r\n    F2: 113,\r\n    F3: 114,\r\n    F4: 115,\r\n    F5: 116,\r\n    F6: 117,\r\n    F7: 118,\r\n    F8: 119,\r\n    F9: 120,\r\n    F10: 121,\r\n    F11: 122,\r\n    F12: 123,\r\n    NUM_LOCK: 144,\r\n    SCROLL_LOCK: 145,\r\n    SEMICOLON: 186,\r\n    EQUALS: 187,\r\n    COMMA: 188,\r\n    DASH: 189,\r\n    PERIOD: 190,\r\n    FORWARD_SLASH: 191,\r\n    GRAVE_ACCENT: 192,\r\n    OPEN_BRACKET: 219,\r\n    BACK_SLASH: 220,\r\n    CLOSE_BRACKET: 221,\r\n    SINGLE_QUOTE: 222\r\n};\r\n\r\n// note that this dictionary is used for display purposes\r\n// not all string values are what real keyCodes are like\r\n// check the above object for real representations\r\nexport const reversedKeyboard = {};\r\nreversedKeyboard.keys = {\r\n    8: '&lArr;',\r\n    9: 'TAB',\r\n    13: '&#9166;',\r\n    16: 'SHIFT',\r\n    17: 'CTRL',\r\n    18: 'ALT',\r\n    19: 'PAUSE',\r\n    20: 'C_LOCK',\r\n    27: 'ESC',\r\n    32: 'SPACE',\r\n    33: 'PGUP',\r\n    34: 'PGDN',\r\n    35: 'END',\r\n    36: 'HOME',\r\n    37: '&larr;',\r\n    38: '&uarr;',\r\n    39: '&rarr;',\r\n    40: '&darr;',\r\n    45: 'INS',\r\n    46: 'DEL',\r\n    48: '0',\r\n    49: '1',\r\n    50: '2',\r\n    51: '3',\r\n    52: '4',\r\n    53: '5',\r\n    54: '6',\r\n    55: '7',\r\n    56: '8',\r\n    57: '9',\r\n    65: 'A',\r\n    66: 'B',\r\n    67: 'C',\r\n    68: 'D',\r\n    69: 'E',\r\n    70: 'F',\r\n    71: 'G',\r\n    72: 'H',\r\n    73: 'I',\r\n    74: 'J',\r\n    75: 'K',\r\n    76: 'L',\r\n    77: 'M',\r\n    78: 'N',\r\n    79: 'O',\r\n    80: 'P',\r\n    81: 'Q',\r\n    82: 'R',\r\n    83: 'S',\r\n    84: 'T',\r\n    85: 'U',\r\n    86: 'V',\r\n    87: 'W',\r\n    88: 'X',\r\n    89: 'Y',\r\n    90: 'Z',\r\n    93: 'SELECT',\r\n    96: 'N_0',\r\n    97: 'N_1',\r\n    98: 'N_2',\r\n    99: 'N_3',\r\n    100: 'N_4',\r\n    101: 'N_5',\r\n    102: 'N_6',\r\n    103: 'N_7',\r\n    104: 'N_8',\r\n    105: 'N_9',\r\n    106: '*',\r\n    107: '+',\r\n    109: '-',\r\n    110: '.',\r\n    111: '/',\r\n    112: 'F1',\r\n    113: 'F2',\r\n    114: 'F3',\r\n    115: 'F4',\r\n    116: 'F5',\r\n    117: 'F6',\r\n    118: 'F7',\r\n    119: 'F8',\r\n    120: 'F9',\r\n    121: 'F10',\r\n    122: 'F11',\r\n    123: 'F12',\r\n    144: 'N_LOCK',\r\n    145: 'S_LOCK',\r\n    186: ';',\r\n    187: '=',\r\n    188: ',',\r\n    189: '-',\r\n    190: '.',\r\n    191: '/',\r\n    192: '`',\r\n    219: '{',\r\n    220: '\\\\',\r\n    221: '}',\r\n    222: '\\''\r\n};\r\n\r\nconst getInnerOuterEdgeColRow = (canvasWidth, canvasHeight, scale) => {\r\n    const cols = Math.floor(canvasWidth / scale);\r\n    const rows = Math.floor(canvasHeight / scale);\r\n\r\n    const middleCol = Math.floor(cols / 2);\r\n    const middleRow = Math.floor(rows / 2);\r\n\r\n    const innerOuterEdgeCol = middleCol / 2;\r\n    const innerOuterEdgeRow = middleRow / 2;\r\n\r\n    return { \r\n        innerOuterEdgeCol: innerOuterEdgeCol, \r\n        innerOuterEdgeRow: innerOuterEdgeRow, \r\n        middleCol: middleCol, \r\n        middleRow: middleRow,\r\n        cols: cols,\r\n        rows: rows\r\n    };\r\n}\r\n\r\nexport const randomLocationNearMiddle = (canvasWidth, canvasHeight, scale) => {\r\n    const { innerOuterEdgeCol, innerOuterEdgeRow, middleCol, middleRow } = \r\n    getInnerOuterEdgeColRow(canvasWidth, canvasHeight, scale);\r\n    \r\n    const randomPositiveInnerColDistance = Math.floor((Math.random() * innerOuterEdgeCol)) + 1;\r\n    const randomInnerColDistance = randomPositiveInnerColDistance * (Math.random() > 0.5 ? 1 : -1);\r\n    const randomPositiveInnerRowDistance = Math.floor((Math.random() * innerOuterEdgeRow)) + 1;\r\n    const randomInnerRowDistance = randomPositiveInnerRowDistance * (Math.random() > 0.5 ? 1 : -1);\r\n\r\n    const randomCol = middleCol + randomInnerColDistance;\r\n    const randomRow = middleRow + randomInnerRowDistance;\r\n\r\n    return { x: randomCol * scale, y: randomRow * scale };\r\n}\r\n\r\nexport const randomLocationNearEdge = (canvasWidth, canvasHeight, scale) => {\r\n    const { innerOuterEdgeCol, innerOuterEdgeRow, cols, rows } = \r\n    getInnerOuterEdgeColRow(canvasWidth, canvasHeight, scale);\r\n    \r\n    const randomOuterColDistance = Math.floor(Math.random() * innerOuterEdgeCol);\r\n    const randomOuterRowDistance = Math.floor(Math.random() * innerOuterEdgeRow);\r\n\r\n    const horizontal = Math.random();\r\n    const vertical = Math.random();\r\n\r\n    let randomCol;\r\n    let randomRow;\r\n\r\n    // near left\r\n    if (horizontal < 0.33) {\r\n        // skip first column since the snake is spawned at the beginning\r\n        randomCol = 1 + randomOuterColDistance;\r\n    }\r\n    // near right\r\n    else if (horizontal < 0.66) {\r\n        randomCol = cols - randomOuterColDistance;\r\n    }\r\n    // near middle\r\n    else {\r\n        const leftMiddle = Math.random() > 0.5;\r\n        if (leftMiddle) {\r\n            randomCol = cols / 2 - randomOuterColDistance;\r\n        }\r\n        else {\r\n            randomCol = cols / 2 + randomOuterColDistance;\r\n        }\r\n    }\r\n\r\n    // near top\r\n    if (vertical < 0.33) {\r\n        // skip first row since the snake is spawned at the beginning\r\n        randomRow = 1 + randomOuterRowDistance;\r\n    }\r\n    // near bottom\r\n    else if (vertical < 0.66) {\r\n        randomRow = rows - randomOuterRowDistance;\r\n    }\r\n    // near middle\r\n    else {\r\n        const topMiddle = Math.random() > 0.5;\r\n        if (topMiddle) {\r\n            randomRow = rows / 2 - randomOuterRowDistance;\r\n        }\r\n        else {\r\n            randomRow = rows / 2 + randomOuterRowDistance;\r\n        }\r\n    }\r\n\r\n    return { x: randomCol * scale, y: randomRow * scale };\r\n}","import React, { useRef, useEffect } from 'react';\r\nimport { reversedKeyboard } from '../../shared/utility';\r\n\r\nimport classes from './ControlForm.module.css';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nconst ControlForm = (props) => {\r\n    const { control, direction, onAssignKey } = props;\r\n    const buttonRef = useRef(null);\r\n    const setButtonControl = (control) => {\r\n        buttonRef.current.innerHTML = reversedKeyboard.keys[control];\r\n    }\r\n\r\n    const handleInput = (event) => {\r\n        setButtonControl(event.keyCode);\r\n        onAssignKey(event.keyCode);\r\n    }\r\n\r\n    useEffect(() => {\r\n        setButtonControl(control);\r\n    }, [control]);\r\n\r\n    return (\r\n        <div className={classes.Form}>\r\n            <FontAwesomeIcon icon={direction} className={classes.Direction}/>\r\n            <button \r\n                className={classes.Button} \r\n                onKeyDown={handleInput}>\r\n                    <span \r\n                        ref={buttonRef} \r\n                        className={classes.Input}>\r\n                    </span>\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ControlForm;","import React, { useEffect, useState } from 'react';\r\n\r\nimport classes from './Countdown.module.css';\r\n\r\nconst Countdown = (props) => {\r\n    const [counter, setCounter] = useState(3);\r\n\r\n    useEffect(() => {\r\n        let timer;\r\n        if (counter > 0) { \r\n            timer = setTimeout(() => setCounter(counter - 1), 1000);\r\n        }\r\n        else {\r\n            props.callback();\r\n        }\r\n\r\n        return () => {\r\n            clearTimeout(timer);\r\n        }\r\n    }, [props, counter]);\r\n    \r\n      return (\r\n        <div className={classes.Countdown}>\r\n          <div>{counter}</div>\r\n        </div>\r\n      );\r\n};\r\n\r\nexport default Countdown;","import React, { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport classes from './Menu.module.css';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPlay } from '@fortawesome/free-solid-svg-icons';\r\nimport * as actions from '../../store/actions/actions';\r\nimport Aux from '../../hoc/Auxiliary';\r\nimport RangeSlider from '../../components/RangeSlider/RangeSlider';\r\nimport { gameModes } from '../../shared/gameSettings';\r\nimport ControlForm from '../../components/ControlForm/ControlForm';\r\nimport { faArrowUp, faArrowDown, faArrowLeft, faArrowRight } from '@fortawesome/free-solid-svg-icons';\r\nimport Countdown from '../../components/Countdown/Countdown';\r\n\r\nconst Menu = () => {\r\n    const [starting, setStarting] = useState(false);\r\n    const gameOver = useSelector(state => state.game.gameOver);\r\n    const initialLoad = useSelector(state => state.game.initialLoad);\r\n    const currentScore = useSelector(state => state.game.currentScore);\r\n    const highscore = useSelector(state => state.game.highscore);\r\n    const isNewHighscore = useSelector(state => state.game.isNewHighscore);\r\n    const speedGameMode = useSelector(state => state.game.speedGameMode);\r\n    const wallsGameMode = useSelector(state => state.game.wallsGameMode);\r\n    const leftControl = useSelector(state => state.controls.leftControl);\r\n    const upControl = useSelector(state => state.controls.upControl);\r\n    const rightControl = useSelector(state => state.controls.rightControl);\r\n    const downControl = useSelector(state => state.controls.downControl);\r\n    const dispatch = useDispatch();\r\n    \r\n    const beginCountdown = () => {\r\n        setStarting(true);\r\n    }\r\n\r\n    const startGame = () => {\r\n        dispatch(actions.startGame());\r\n    }\r\n\r\n    const onSpeedChange = (event) => {\r\n        const speedModePick = event.target.value;\r\n        let mode;\r\n\r\n        if (+speedModePick === gameModes.easy.value) {\r\n            mode = gameModes.easy;\r\n        }\r\n        else if (+speedModePick === gameModes.medium.value) {\r\n            mode = gameModes.medium;\r\n        }\r\n        else {\r\n            mode = gameModes.hard;\r\n        }\r\n        \r\n        dispatch(actions.setSpeed(mode));\r\n    }\r\n\r\n    const onWallsChange = (event) => {\r\n        const wallsModePick = event.target.value;\r\n        let mode;\r\n\r\n        if (+wallsModePick === gameModes.easy.value) {\r\n            mode = gameModes.easy;\r\n        }\r\n        else if (+wallsModePick === gameModes.medium.value) {\r\n            mode = gameModes.medium;\r\n        }\r\n        else {\r\n            mode = gameModes.hard;\r\n        }\r\n\r\n        dispatch(actions.setWalls(mode));\r\n    }\r\n\r\n    // Play button setup\r\n    const buttonClasses = [classes.Button];\r\n    if (!gameOver) {\r\n        buttonClasses.push(classes.DisabledButton);\r\n    }\r\n\r\n    // Is highscore or not\r\n    let displayHighscore = <p className={[classes.Highscore, classes.WhiteText, classes.NoSelect].join(' ')}>Best score: {highscore}</p>;\r\n    if (isNewHighscore) {\r\n        displayHighscore = (\r\n            <Aux>\r\n                <span className={[classes.NewHighscore, classes.NoSelect].join(' ')}>New!</span>\r\n                &nbsp;\r\n                <p className={[classes.Highscore, classes.WhiteText, classes.NoSelect].join(' ')}>Best score: {highscore}</p>;\r\n            </Aux>\r\n        );\r\n    }\r\n    \r\n    let display = null;\r\n    // On load display\r\n    const initialDisplay = <h1 className={[classes.Heading, classes.WhiteText, classes.NoSelect].join(' ')}>Snake Game</h1>;\r\n    // On game over display\r\n    const gameOverDisplay = (\r\n        <Aux>\r\n            <p className={[classes.CurrentScore, classes.WhiteText, classes.NoSelect].join(' ')}>{currentScore}</p>\r\n            {displayHighscore}\r\n        </Aux>\r\n    );\r\n\r\n    // On load or game over style\r\n    const classList = [classes.Menu];\r\n    if (!initialLoad) {\r\n        display = initialDisplay;\r\n        classList.push(classes.MenuOut);\r\n    }\r\n    else {\r\n        if (gameOver) {\r\n            classList.push(classes.MenuSlideOut);\r\n            display = gameOverDisplay;\r\n        }\r\n    }\r\n\r\n    const onLeftControlSubmit = (key) => {\r\n        dispatch(actions.setLeftControl(key));\r\n    }\r\n\r\n    const onUpControlSubmit = (key) => {\r\n        dispatch(actions.setUpControl(key));\r\n    }\r\n\r\n    const onRightControlSubmit = (key) => {\r\n        dispatch(actions.setRightControl(key));\r\n    }\r\n\r\n    const onDownControlSubmit = (key) => {\r\n        dispatch(actions.setDownControl(key));\r\n    }\r\n\r\n    const leftControlForm = <ControlForm control={leftControl} direction={faArrowLeft} onAssignKey={onLeftControlSubmit}/>;\r\n    const upControlForm = <ControlForm control={upControl} direction={faArrowUp} onAssignKey={onUpControlSubmit}/>;\r\n    const rightControlForm = <ControlForm control={rightControl} direction={faArrowRight} onAssignKey={onRightControlSubmit}/>;\r\n    const downControlForm = <ControlForm control={downControl} direction={faArrowDown} onAssignKey={onDownControlSubmit}/>;\r\n\r\n    let all = (\r\n        <Aux>\r\n            <div>\r\n                {display}\r\n            </div>\r\n            <div>\r\n                <div className={classes.FoodContainer}>\r\n                    <div className={classes.FoodHolder}>\r\n                        <span className={[classes.WhiteText, classes.NoSelect].join(' ')}>Food</span>\r\n                        <br/>\r\n                        <div className={classes.Food} style={{background: '#FF0080', boxShadow: '0 0 10px #FF0080'}}></div>\r\n                    </div>\r\n                    <div className={classes.FoodHolder}>\r\n                        <span className={[classes.WhiteText, classes.NoSelect].join(' ')}>Bonus</span>\r\n                        <br/>\r\n                        <div className={classes.Food} style={{background: 'yellow', boxShadow: '0 0 10px yellow'}}></div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div>\r\n                <h3 className={[classes.WhiteText, classes.NoSelect, classes.DifficultyHeading].join(' ')}>Difficulty</h3>\r\n                <div className={classes.SpeedSettings}>\r\n                    <h4 className={[classes.WhiteText, classes.NoSelect].join(' ')}>Speed</h4>\r\n                    <RangeSlider \r\n                        background=\"rgba(0, 0, 0, 1)\" \r\n                        labels={['easy', 'medium', 'hard']}\r\n                        width=\"300px\" \r\n                        height=\"6px\" \r\n                        min=\"1\" \r\n                        max=\"3\" \r\n                        step=\"1\" \r\n                        initialValue={speedGameMode.value} \r\n                        onChange={onSpeedChange}/>\r\n                </div>                \r\n                <div className={classes.WallsSettings}>\r\n                    <h4 className={[classes.WhiteText, classes.NoSelect].join(' ')}>Walls</h4>\r\n                    <RangeSlider \r\n                        background=\"rgba(0, 0, 0, 1)\" \r\n                        labels={['easy', 'medium', 'hard']}\r\n                        width=\"300px\" \r\n                        height=\"6px\" \r\n                        min=\"1\" \r\n                        max=\"3\" \r\n                        step=\"1\" \r\n                        initialValue={wallsGameMode.value} \r\n                        onChange={onWallsChange}/>\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <h3 className={[classes.WhiteText, classes.NoSelect, classes.ControlsHeading].join(' ')}>Controls</h3>\r\n                <div className={classes.Controls}>\r\n                    {leftControlForm}\r\n                    {upControlForm}\r\n                    {rightControlForm}\r\n                    {downControlForm}\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <FontAwesomeIcon icon={faPlay} className={buttonClasses.join(' ')} onClick={beginCountdown}/>\r\n            </div>\r\n        </Aux>\r\n    );\r\n\r\n    if (starting) {\r\n        all = <Countdown callback={startGame}/>\r\n    }\r\n\r\n    return (\r\n        <div className={classList.join(' ')}>\r\n            {all}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Menu;","import * as actionTypes from './actionTypes';\r\n\r\nexport const startGame = () => {\r\n    return {\r\n        type: actionTypes.START_GAME\r\n    };\r\n}\r\n\r\nexport const endGame = () => {\r\n    return {\r\n        type: actionTypes.END_GAME\r\n    };\r\n}\r\n\r\nexport const eatFood = () => {\r\n    return {\r\n        type: actionTypes.EAT_FOOD\r\n    };\r\n}\r\n\r\nexport const eatBonusFood = () => {\r\n    return {\r\n        type: actionTypes.EAT_BONUS_FOOD\r\n    };\r\n}\r\n\r\nexport const setSpeed = (mode) => {\r\n    return {\r\n        type: actionTypes.SET_SPEED,\r\n        mode: mode\r\n    };\r\n}\r\n\r\nexport const setWalls = (mode) => {\r\n    return {\r\n        type: actionTypes.SET_WALLS,\r\n        mode: mode\r\n    };\r\n}\r\n\r\nexport const setUpControl = (control) => {\r\n    return {\r\n        type: actionTypes.SET_UP_CONTROL,\r\n        control: control\r\n    };\r\n}\r\n\r\nexport const setDownControl = (control) => {\r\n    return {\r\n        type: actionTypes.SET_DOWN_CONTROL,\r\n        control: control\r\n    };\r\n}\r\n\r\nexport const setLeftControl = (control) => {\r\n    return {\r\n        type: actionTypes.SET_LEFT_CONTROL,\r\n        control: control\r\n    };\r\n}\r\n\r\nexport const setRightControl = (control) => {\r\n    return {\r\n        type: actionTypes.SET_RIGHT_CONTROL,\r\n        control: control\r\n    };\r\n}","export const START_GAME = 'START_GAME';\r\nexport const END_GAME = 'END_GAME';\r\nexport const EAT_FOOD = 'EAT_FOOD';\r\nexport const EAT_BONUS_FOOD = 'EAT_BONUS_FOOD';\r\nexport const SET_SPEED = 'SET_SPEED';\r\nexport const SET_WALLS = 'SET_WALLS';\r\nexport const SET_UP_CONTROL = 'SET_UP_CONTROL';\r\nexport const SET_DOWN_CONTROL = 'SET_DOWN_CONTROL';\r\nexport const SET_LEFT_CONTROL = 'SET_LEFT_CONTROL';\r\nexport const SET_RIGHT_CONTROL = 'SET_RIGHT_CONTROL';","import { useEffect, useRef } from 'react';\r\n\r\nconst useCanvas = (draw, options = {}) => {\r\n\r\n    const { predraw, postdraw } = options;\r\n    const canvasRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n    \r\n        const canvas = canvasRef.current;\r\n        const context = canvas.getContext(options.context || '2d');\r\n        let animationFrameId;\r\n        \r\n        // frame rate control\r\n        const requestedFrameRate = options.frameRate;\r\n        let frameRate;\r\n        let now;\r\n        let then;\r\n        let elapsed;\r\n        \r\n        const render = (time) => {\r\n            // request next frame\r\n            animationFrameId = window.requestAnimationFrame(render);\r\n\r\n            // calc elapsed time since the last loop \r\n            now = time;\r\n            elapsed = now - then; \r\n\r\n            if (elapsed > frameRate) {\r\n                then = now - (elapsed % frameRate);\r\n                predraw(context, canvas);\r\n                draw(context);\r\n                postdraw(context);\r\n            }\r\n        }\r\n\r\n        const startAnimating = (fps) => {\r\n            frameRate = 1000 / fps;\r\n            then = window.performance.now();\r\n            render();\r\n        }\r\n\r\n        startAnimating(requestedFrameRate);\r\n        \r\n        return () => {\r\n            window.cancelAnimationFrame(animationFrameId);\r\n        }\r\n    }, [draw, options, predraw, postdraw]);\r\n\r\n    return canvasRef;\r\n};\r\n\r\nexport default useCanvas;","import React from 'react';\r\n\r\nimport useCanvas from '../../hooks/useCanvas';\r\n\r\nconst _predraw = (context, canvas) => {\r\n    context.save();    \r\n    // we can resize the canvas here\r\n    const { width, height } = context.canvas;\r\n    context.clearRect(0, 0, width, height);\r\n}\r\n\r\nconst _postdraw = (context) => {\r\n    context.restore();\r\n}\r\n\r\nconst Canvas = (props) => {\r\n\r\n    // we take these properties from the parent so this Canvas is reusable\r\n    const { draw, frameRate, predraw=_predraw, postdraw=_postdraw, width, height } = props\r\n    // we will use our custom useCanvas hook to set up the canvas and return the ref to it\r\n    const canvasRef = useCanvas(draw, { predraw, postdraw, frameRate });\r\n\r\n    return (\r\n        <canvas width={width} height={height} ref={canvasRef}/>        \r\n    );\r\n};\r\n\r\nexport default Canvas;","export default class Point {\r\n    constructor(x, y) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n}","import Point from '../Models/point';\r\n\r\nexport default class Food {\r\n    constructor(cols, rows, scale, fill, stroke, triggerEndGame) {\r\n        this.x = 0;\r\n        this.y = 0;\r\n        this.pickLocationAttempt = 0;\r\n        this.pickLocationAttemptLimit = 3;\r\n        this.cols = cols;\r\n        this.rows = rows;\r\n        this.scale = scale;\r\n        this.triggerEndGame = triggerEndGame;\r\n        this.fill = fill;\r\n        this.stroke = stroke;\r\n    }\r\n\r\n    pickFoodLocationRandom = () => {\r\n        const randomCol = Math.floor(Math.random() * this.cols);\r\n        const randomRow = Math.floor(Math.random() * this.rows);\r\n        return new Point(randomCol * this.scale, randomRow * this.scale);\r\n    }\r\n\r\n    checkIfIsOnTail = (x, y, snakeTail) => {\r\n        let isOnSnakeTail = false;\r\n        for (let i = 0; i < snakeTail.length; i++) {\r\n            let part = snakeTail[i];\r\n            if (part.x === x && part.y === y) {\r\n                isOnSnakeTail = true;\r\n                break;\r\n            }\r\n        }\r\n        return isOnSnakeTail;\r\n    }\r\n\r\n    checkIfIsOnWall = (x, y, wallsMap) => {\r\n        let isOnWall = false;\r\n        for (let i = 0; i < wallsMap.length; i++) {\r\n            let wall = wallsMap[i];\r\n            if (wall.x === x && wall.y === y) {\r\n                isOnWall = true;\r\n                break;\r\n            }\r\n        }\r\n        return isOnWall;\r\n    }\r\n\r\n    checkIfIsOnHead = (x, y, snakeHead) => {\r\n        return snakeHead.x === x && snakeHead.y === y;   \r\n    }\r\n\r\n    checkIfFreeFoodLocation = (x, y, snakeHead, snakeTail, wallsMap) => {\r\n        let free = true;\r\n\r\n        if (this.checkIfIsOnTail(x, y, snakeTail)) {\r\n            free = false;\r\n        } else if (this.checkIfIsOnWall(x, y, wallsMap)) {\r\n            free = false;\r\n        } else if (this.checkIfIsOnHead(x, y, snakeHead)) {\r\n            free = false;\r\n        }\r\n\r\n        return free;\r\n    }\r\n\r\n    pickFoodLocationFromAvailableLocations = (snakeHead, snakeTail, wallsMap) => {\r\n        let location = null;\r\n\r\n        for (let row = 0; row < this.rows; row++) {\r\n            for (let col = 0; col < this.cols; col++) {\r\n                let x = col * this.scale;\r\n                let y = row * this.scale;\r\n                let okLocation = this.checkIfFreeFoodLocation(x, y, snakeHead, snakeTail, wallsMap);\r\n\r\n                if (okLocation) {\r\n                    location = new Point(x, y);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return location;\r\n    }\r\n\r\n    pickFoodLocation = (snakeHead, snakeTail, wallsMap) => {\r\n        let newPos;\r\n        // we want to pick a random location if that is possible since it is faaster\r\n        // but if we get repeated hits on the snake body, we want to use a slower but 100% successful method\r\n        if (this.pickLocationAttempt < this.pickLocationAttemptLimit) {\r\n            newPos = this.pickFoodLocationRandom();\r\n        }\r\n        else {\r\n            newPos = this.pickFoodLocationFromAvailableLocations(snakeHead, snakeTail, wallsMap);\r\n        }\r\n\r\n        // if it can't find the new pos it is game over\r\n        if (newPos === null) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.checkIfFreeFoodLocation(newPos.x, newPos.y, snakeHead, snakeTail, wallsMap)) {\r\n            this.pickLocationAttempt++;\r\n            this.pickFoodLocation(snakeHead, snakeTail, wallsMap);\r\n        }\r\n        else {            \r\n            this.x = newPos.x;\r\n            this.y = newPos.y;\r\n            // eslint-disable-next-line react-hooks/exhaustive-deps\r\n            this.pickLocationAttempt = 0;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    setFoodSpawnPoint = (snakeHead, snakeTail, wallsMap) => {\r\n        if (!this.pickFoodLocation(snakeHead, snakeTail, wallsMap)) {\r\n            this.triggerEndGame();\r\n        }\r\n    }\r\n\r\n    show = (ctx) => {\r\n        ctx.shadowBlur = 10;\r\n        ctx.shadowColor = this.fill;\r\n        ctx.fillStyle = this.fill;\r\n        ctx.fillRect(this.x, this.y, this.scale, this.scale);\r\n    }\r\n}","import { keyboard } from '../../../shared/utility';\r\nimport { figureStyles } from '../../../shared/gameSettings';\r\nimport Point from './point';\r\n\r\nexport default class SnakeClass {\r\n    constructor(\r\n        canvasWidth, \r\n        canvasHeight, \r\n        scale,\r\n        leftControl, \r\n        upControl, \r\n        rightControl, \r\n        downControl) {\r\n        this.x = 0;\r\n        this.y = 0;\r\n        // initial state is that the snake moves to the right\r\n        this.direction = keyboard.keys.RIGHT_ARROW;\r\n        // we use this field to check if we can move\r\n        // we use this since we use event listener for 'keydown'\r\n        // and event handler can get invoked before checks in the\r\n        // snakeGameLifecycle method inside Snake.js\r\n        // effectively letting us go in reverse when there are 0 or 1 elements in the tail\r\n        this.lastKnownDirection = this.direction;\r\n        this.dx = 1;\r\n        this.dy = 0;\r\n        this.canvasWidth = canvasWidth;\r\n        this.canvasHeight = canvasHeight;\r\n        this.scale = scale;\r\n        // tracks the number of history parts (tail elements)\r\n        this.length = 0;\r\n        // tracks the history of snake's movement (if it has eaten any food)\r\n        this.tail = [];\r\n        this.isDead = false;\r\n        this.leftControl = leftControl;\r\n        this.upControl = upControl;\r\n        this.rightControl = rightControl;\r\n        this.downControl = downControl;\r\n    }\r\n\r\n    update = () => {\r\n        if (!this.isDead) {\r\n            // shift only if a food has been eaten\r\n            if (this.length === this.tail.length) {\r\n                // shift all tail parts\r\n                this.tail.shift();\r\n            }\r\n            // add latest previous position of the head\r\n            this.tail[this.length - 1] = new Point(this.x, this.y);\r\n\r\n            // move grid cell by grid cell\r\n            const newX = this.x + this.dx * this.scale;\r\n            const newY = this.y + this.dy * this.scale;\r\n\r\n            // check if in bounds left and right\r\n            if (newX >= 0 && newX <= this.canvasWidth - this.scale) {\r\n                this.x = newX;\r\n            }\r\n\r\n            // check if in bounds up and down\r\n            if (newY >= 0 && newY <= this.canvasHeight - this.scale) {\r\n                this.y = newY;\r\n            }\r\n\r\n            // update last known position only after update\r\n            // which will technically be a new canvas frame\r\n            this.setLastKnownDirection();\r\n        }\r\n    }\r\n\r\n    show = (ctx) => {\r\n        // draw the tail\r\n        ctx.shadowBlur = 10;\r\n        ctx.shadowColor = figureStyles.body.fill;\r\n        ctx.fillStyle = figureStyles.body.fill;\r\n        for (let i = 0; i < this.tail.length; i++) {\r\n        \r\n            ctx.fillRect(this.tail[i].x, this.tail[i].y, this.scale, this.scale);\r\n        }\r\n\r\n        // draw the head\r\n        ctx.shadowBlur = 10;\r\n        ctx.shadowColor = figureStyles.head.fill;\r\n        ctx.fillStyle = figureStyles.head.fill;        \r\n        ctx.fillRect(this.x, this.y, this.scale, this.scale);\r\n    }\r\n\r\n    getDirection = (event) => {\r\n        if (!this.isDead) {\r\n            const key = event.keyCode;\r\n            switch(key) {\r\n                case this.upControl:\r\n                    this.setDirection(0, -1, key);\r\n                    break;\r\n                case this.downControl:\r\n                    this.setDirection(0, 1, key);\r\n                    break;\r\n                case this.leftControl:\r\n                    this.setDirection(-1, 0, key);\r\n                    break;\r\n                case this.rightControl:\r\n                    this.setDirection(1, 0, key);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    setDirection = (dx, dy, newDirection) => {\r\n        // restricting movement in opposite direction\r\n        let canMove = true;\r\n\r\n        switch(newDirection) {\r\n            case this.upControl:\r\n                if (this.lastKnownDirection === this.downControl) {\r\n                    canMove = false;\r\n                }\r\n                break;\r\n            case this.downControl:\r\n                if (this.lastKnownDirection === this.upControl) {\r\n                    canMove = false;\r\n                }\r\n                break;\r\n            case this.leftControl:\r\n                if (this.lastKnownDirection === this.rightControl) {\r\n                    canMove = false;\r\n                }\r\n                break;\r\n            case this.rightControl:\r\n                if (this.lastKnownDirection === this.leftControl) {\r\n                    canMove = false;\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        if (canMove) {\r\n            this.direction = newDirection;\r\n            this.dx = dx;\r\n            this.dy = dy;\r\n        }\r\n    }\r\n\r\n    eat = (food, eatFood) => {\r\n        if (this.x === food.x && this.y === food.y) {\r\n            this.grow();\r\n            eatFood();\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    grow = () => {\r\n        this.length++;\r\n    }\r\n\r\n    deathByOutOfBounds = (x, y) => {\r\n        // check if future snake pos is out of bounds\r\n        if (x < 0 || x >= this.canvasWidth ||\r\n            y < 0 || y >= this.canvasHeight) {\r\n            this.isDead = true;\r\n            return true;\r\n        }\r\n    }\r\n\r\n    deathByWalls = (x, y, walls) => {\r\n        for (let i = 0; i < walls.length; i++) {\r\n            const wall = walls[i];\r\n            if (x === wall.x && y === wall.y) {\r\n                this.isDead = true;\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n\r\n    deathBySuicide = (x, y) => {\r\n        // check if snake ate itself\r\n        for (let i = 0; i < this.tail.length; i++) {\r\n            const pos = this.tail[i];\r\n            if (x === pos.x && y === pos.y) {\r\n                this.isDead = true;\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n\r\n    death = (walls) => {            \r\n        let x = this.x + this.dx * this.scale;\r\n        let y = this.y + this.dy * this.scale;\r\n\r\n        if (this.deathByOutOfBounds(x, y)) {\r\n            return true;\r\n        }\r\n\r\n        if (this.deathByWalls(x, y, walls)) {\r\n            return true;\r\n        }\r\n\r\n        if (this.deathBySuicide(x, y)) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    getSnakeHead = () => {\r\n        return new Point(this.x, this.y);\r\n    }\r\n\r\n    getSnakeTail = () => {\r\n        return this.tail;\r\n    }\r\n\r\n    setLastKnownDirection = () => {\r\n        this.lastKnownDirection = this.direction;\r\n    }\r\n}","import React, { useEffect, useCallback } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport classes from './Snake.module.css';\r\nimport Canvas from '../../components/Canvas/Canvas';\r\nimport Food from './Models/food';\r\nimport SnakeClass from './Models/snake';\r\nimport * as actions from '../../store/actions/actions';\r\nimport { generalSettings, figureStyles } from '../../shared/gameSettings';\r\nimport { randomLocationNearEdge, randomLocationNearMiddle } from '../../shared/utility';\r\nimport background from '../../assets/img/background.png';\r\n\r\nconst Snake = () => {\r\n    const gameOver = useSelector(state => state.game.gameOver);\r\n    const initialLoad = useSelector(state => state.game.initialLoad);\r\n    const speed = useSelector(state => state.game.speed);\r\n    const walls = useSelector(state => state.game.walls);\r\n    const leftControl = useSelector(state => state.controls.leftControl);\r\n    const upControl = useSelector(state => state.controls.upControl);\r\n    const rightControl = useSelector(state => state.controls.rightControl);\r\n    const downControl = useSelector(state => state.controls.downControl);\r\n    const dispatch = useDispatch();\r\n\r\n    const endGame = useCallback(\r\n        () => {\r\n            dispatch(actions.endGame());\r\n        }, [dispatch]\r\n    );\r\n\r\n    const eatFood = useCallback(\r\n        () => {\r\n            dispatch(actions.eatFood());\r\n        }, [dispatch]\r\n    );\r\n\r\n    const eatBonusFood = useCallback(\r\n        () => {\r\n            dispatch(actions.eatBonusFood());\r\n        }, [dispatch]\r\n    );\r\n\r\n    const frameRate = speed.speed;\r\n    const canvasWidth = generalSettings.canvasWidth;\r\n    const canvasHeight = generalSettings.canvasHeight;\r\n    const scale = generalSettings.scale;\r\n    const cols = Math.floor(canvasWidth / scale);\r\n    const rows = Math.floor(canvasHeight / scale);\r\n    const wallsMap = [];\r\n    const snakee = new SnakeClass(\r\n        generalSettings.canvasWidth, \r\n        generalSettings.canvasHeight, \r\n        generalSettings.scale,\r\n        leftControl, \r\n        upControl, \r\n        rightControl, \r\n        downControl);\r\n    const food = new Food(\r\n        cols, \r\n        rows, \r\n        scale, \r\n        figureStyles.food.fill, \r\n        figureStyles.food.stroke, \r\n        endGame);\r\n\r\n    const bonusFood = new Food(\r\n        cols, \r\n        rows, \r\n        scale, \r\n        figureStyles.bonusFood.fill, \r\n        figureStyles.bonusFood.stroke, \r\n        endGame);\r\n    const bonusFoodSpawnInterval = generalSettings.bonusFoodSpawnInterval;\r\n    const bonusFoodSpawnDuration = generalSettings.bonusFoodSpawnDuration;\r\n    let start;\r\n    let bonusFoodTime;\r\n    let isBonusFoodSpawned = false;\r\n\r\n    const resetBonusFood = useCallback(\r\n        () => {\r\n            bonusFood.x = Number.MIN_SAFE_INTEGER;\r\n            bonusFood.y = Number.MIN_SAFE_INTEGER;\r\n            // eslint-disable-next-line react-hooks/exhaustive-deps\r\n            isBonusFoodSpawned = false;\r\n            // eslint-disable-next-line react-hooks/exhaustive-deps\r\n            start = Date.now();\r\n        }, [bonusFood, isBonusFoodSpawned, start]\r\n    );\r\n\r\n    const pickWallsLocation = useCallback(\r\n        () => {\r\n            const percentOfWalls = (walls.walls / 100);\r\n            const numberOfWalls = cols * rows * percentOfWalls;\r\n            for (let i = 0; i < numberOfWalls; i++) {\r\n                const middle = Math.random() > 0.5;\r\n                let point;\r\n\r\n                if (middle) {\r\n                    point = randomLocationNearMiddle(canvasWidth, canvasHeight, scale);\r\n                }\r\n                else {\r\n                    point = randomLocationNearEdge(canvasWidth, canvasHeight, scale);\r\n                }\r\n\r\n                if (wallsMap.findIndex(w => w.x === point.x && w.y === point.y) === -1) {\r\n                    wallsMap.push(point);\r\n                }\r\n                else {\r\n                    i--;\r\n                    continue;\r\n                }\r\n            }\r\n        }, [cols, rows, walls, wallsMap, canvasWidth, canvasHeight, scale]\r\n    );\r\n\r\n    // const drawHorizontalGridLines = (ctx, strokeStyle) => {\r\n    //     ctx.beginPath(); \r\n    //     for (let y = 0; y <= canvasHeight; y += scale) {\r\n    //         ctx.moveTo(0, y);\r\n    //         ctx.lineTo(canvasWidth, y);\r\n    //     }\r\n    //     ctx.strokeStyle = strokeStyle;\r\n    //     ctx.stroke();\r\n    // }\r\n\r\n    // const drawVerticalGridLines = (ctx, strokeStyle) => {\r\n    //     ctx.beginPath(); \r\n    //     for (let x = 0; x <= canvasWidth; x += scale) {\r\n    //         ctx.moveTo(x, 0);\r\n    //         ctx.lineTo(x, canvasHeight);\r\n    //     }\r\n    //     ctx.strokeStyle = strokeStyle;\r\n    //     ctx.stroke(); \r\n    // }\r\n\r\n    const drawWalls = (ctx) => {\r\n        ctx.shadowBlur = 10;\r\n        ctx.shadowColor = figureStyles.wall.fill;\r\n        ctx.fillStyle = figureStyles.wall.fill;\r\n        for (let i = 0; i < wallsMap.length; i++) {\r\n            ctx.fillRect(wallsMap[i].x, wallsMap[i].y, scale, scale);\r\n        }\r\n    }\r\n    \r\n    const snakeGameLifecycle = (ctx) => {\r\n        if (initialLoad) {\r\n            if (!gameOver) {                \r\n                drawWalls(ctx);\r\n                // draw the snake\r\n                if (snakee.death(wallsMap)) {\r\n                    endGame();\r\n                    return;\r\n                }\r\n                snakee.update();\r\n                snakee.show(ctx);\r\n                \r\n                // check if snake ate food\r\n                if (snakee.eat(food, eatFood)) {\r\n                    food.setFoodSpawnPoint(snakee.getSnakeHead(), snakee.getSnakeTail(), wallsMap);\r\n                }\r\n\r\n                // check if snake ate bonus food\r\n                if (snakee.eat(bonusFood, eatBonusFood)) {\r\n                    resetBonusFood();\r\n                }\r\n\r\n                // draw the food\r\n                food.show(ctx);\r\n\r\n                // should draw bonus food\r\n                let now = Date.now();\r\n                if (now - start > bonusFoodSpawnInterval) {\r\n                    if (!isBonusFoodSpawned) {\r\n                        bonusFood.setFoodSpawnPoint(snakee.getSnakeHead(), snakee.getSnakeTail(), wallsMap);\r\n                        isBonusFoodSpawned = true;\r\n                        bonusFoodTime = Date.now();\r\n                    }\r\n                }\r\n                if (isBonusFoodSpawned) {\r\n                    if (now - bonusFoodTime > bonusFoodSpawnDuration) {\r\n                        resetBonusFood()\r\n                        bonusFoodTime = now;\r\n                    }\r\n                    bonusFood.show(ctx);\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    const draw = (ctx) => {\r\n        snakeGameLifecycle(ctx);\r\n    }\r\n\r\n    const setup = useCallback(\r\n        () => {\r\n            pickWallsLocation();\r\n            food.setFoodSpawnPoint(snakee.getSnakeHead(), snakee.getSnakeTail(), wallsMap);\r\n            resetBonusFood();\r\n        }, [pickWallsLocation, snakee, wallsMap, food, resetBonusFood]    \r\n    );\r\n\r\n    // const backgroundDraw = (ctx) => {\r\n    //     // draw the grid\r\n    //     drawVerticalGridLines(ctx, generalSettings.stroke);\r\n    //     drawHorizontalGridLines(ctx, generalSettings.stroke);\r\n    // }\r\n\r\n    useEffect(() => {\r\n        document.removeEventListener('keydown', snakee.getDirection);\r\n        document.addEventListener('keydown', snakee.getDirection);\r\n        return () => {\r\n            document.removeEventListener('keydown', snakee.getDirection);\r\n        }\r\n    }, [snakee.getDirection]);\r\n\r\n    useEffect(() => {\r\n        setup();        \r\n    }, [setup])\r\n\r\n    return (\r\n        <div className={classes.Snake}>\r\n            {/* <Canvas draw={backgroundDraw} width={canvasWidth} height={canvasHeight} frameRate={frameRate}/> */}\r\n            {/* using image as background for better performance */}\r\n            <img src={background} alt=''/>\r\n            <Canvas draw={draw} width={canvasWidth} height={canvasHeight} frameRate={frameRate}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Snake;","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport Menu from '../../containers/Menu/Menu';\r\nimport Snake from '../../containers/Snake/Snake';\r\nimport classes from './Game.module.css';\r\n\r\nconst Game = () => {\r\n    const gameOver = useSelector(state => state.game.gameOver);\r\n    \r\n    return (\r\n        <div className={classes.Game}>\r\n            {gameOver && <Menu/>}\r\n            <Snake />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Game;","import React from 'react';\r\nimport './App.css';\r\nimport Game from './containers/Game/Game';\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className=\"App\">\r\n      <Game/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import * as actionTypes from '../actions/actionTypes';\r\nimport { updateObject, keyboard } from '../../shared/utility';\r\nimport { speedSettings, wallSettings, gameModes } from '../../shared/gameSettings';\r\n\r\nconst initialState = {\r\n    gameOver: true,\r\n    initialLoad: false,\r\n    speed: speedSettings.easy,\r\n    walls: wallSettings.easy,\r\n    speedGameMode: gameModes.easy,\r\n    wallsGameMode: gameModes.easy,\r\n    bonusFoodPercent: speedSettings.easy.speed + wallSettings.easy.walls,\r\n    currentScore: 0,\r\n    highscore: 0,\r\n    isNewHighscore: false,\r\n    upControl: keyboard.keys.UP_ARROW,\r\n    downControl: keyboard.keys.DOWN_ARROW,\r\n    leftControl: keyboard.keys.LEFT_ARROW,\r\n    rightControl: keyboard.keys.RIGHT_ARROW\r\n}\r\n\r\nconst startGame = (state, action) => {\r\n    return updateObject(state, {\r\n        gameOver: false,\r\n        currentScore: 0,\r\n        isNewHighscore: false,\r\n        initialLoad: true        \r\n    });\r\n}\r\n\r\nconst endGame = (state, action) => {\r\n    const highscore = state.currentScore > state.highscore ? state.currentScore : state.highscore;\r\n    const isNewHighscore = state.currentScore > state.highscore ? true : false;\r\n    return updateObject(state, {\r\n        gameOver: true,\r\n        highscore: highscore,\r\n        isNewHighscore: isNewHighscore\r\n    });\r\n}\r\n\r\nconst eatFood = (state, action) => {\r\n    const points = state.speed.points + state.walls.points;\r\n    const newPoints = state.currentScore + points;\r\n    return updateObject(state, {\r\n        currentScore: newPoints\r\n    });\r\n}\r\n\r\nconst eatBonusFood = (state, action) => {\r\n    const points = state.speed.points + state.walls.points;\r\n    const bonusPoints = points + Math.floor((state.speed.points + state.walls.points) * 0.5);\r\n    const newPoints = state.currentScore + bonusPoints;\r\n    return updateObject(state, {\r\n        currentScore: newPoints\r\n    });\r\n}\r\n\r\nconst setSpeed = (state, action) => {\r\n    let speed;\r\n    let speedGameMode;\r\n\r\n    switch (action.mode) {\r\n        case gameModes.easy:\r\n            speed = speedSettings.easy;\r\n            speedGameMode = gameModes.easy\r\n            break;\r\n        case gameModes.medium:\r\n            speed = speedSettings.medium;\r\n            speedGameMode = gameModes.medium\r\n            break;\r\n        case gameModes.hard:\r\n            speed = speedSettings.hard;\r\n            speedGameMode = gameModes.hard\r\n            break;\r\n        default:\r\n            speed = state.speed;\r\n            speedGameMode = state.speedGameMode\r\n            break;\r\n    }\r\n\r\n    return updateObject(state, {\r\n        speed: speed,\r\n        speedGameMode: speedGameMode\r\n    });\r\n}\r\n\r\nconst setWalls = (state, action) => {\r\n    let walls;\r\n    let wallsGameMode;\r\n\r\n    switch (action.mode) {\r\n        case gameModes.easy:\r\n            walls = wallSettings.easy;\r\n            wallsGameMode = gameModes.easy;\r\n            break;\r\n        case gameModes.medium:\r\n            walls = wallSettings.medium;\r\n            wallsGameMode = gameModes.medium;\r\n            break;\r\n        case gameModes.hard:\r\n            walls = wallSettings.hard;\r\n            wallsGameMode = gameModes.hard;\r\n            break;\r\n        default:\r\n            walls = state.walls;\r\n            wallsGameMode = state.wallsGameMode\r\n            break;\r\n    }\r\n\r\n    return updateObject(state, {\r\n        walls: walls,\r\n        wallsGameMode: wallsGameMode\r\n    });\r\n}\r\n\r\nconst setUpControl = (state, action) => {\r\n    return updateObject(state, {\r\n        upControl: action.control\r\n    });\r\n}\r\n\r\nconst setDownControl = (state, action) => {\r\n    return updateObject(state, {\r\n        downControl: action.control\r\n    });\r\n}\r\n\r\nconst setLeftControl = (state, action) => {\r\n    return updateObject(state, {\r\n        leftControl: action.control\r\n    });\r\n}\r\n\r\nconst setRightControl = (state, action) => {\r\n    return updateObject(state, {\r\n        rightControl: action.control\r\n    });\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.START_GAME: return startGame(state, action);\r\n        case actionTypes.END_GAME: return endGame(state, action);\r\n        case actionTypes.EAT_FOOD: return eatFood(state, action);\r\n        case actionTypes.EAT_BONUS_FOOD: return eatBonusFood(state, action);\r\n        case actionTypes.SET_SPEED: return setSpeed(state, action);\r\n        case actionTypes.SET_WALLS: return setWalls(state, action);\r\n        case actionTypes.SET_UP_CONTROL: return setUpControl(state, action);\r\n        case actionTypes.SET_DOWN_CONTROL: return setDownControl(state, action);\r\n        case actionTypes.SET_LEFT_CONTROL: return setLeftControl(state, action);\r\n        case actionTypes.SET_RIGHT_CONTROL: return setRightControl(state, action);\r\n        default: return state;\r\n    }\r\n}\r\n\r\nexport default reducer;","import * as actionTypes from '../actions/actionTypes';\r\nimport { updateObject, keyboard } from '../../shared/utility';\r\n\r\nconst initialState = {\r\n    upControl: keyboard.keys.UP_ARROW,\r\n    downControl: keyboard.keys.DOWN_ARROW,\r\n    leftControl: keyboard.keys.LEFT_ARROW,\r\n    rightControl: keyboard.keys.RIGHT_ARROW\r\n}\r\n\r\nconst setUpControl = (state, action) => {\r\n    return updateObject(state, {\r\n        upControl: action.control\r\n    });\r\n}\r\n\r\nconst setDownControl = (state, action) => {\r\n    return updateObject(state, {\r\n        downControl: action.control\r\n    });\r\n}\r\n\r\nconst setLeftControl = (state, action) => {\r\n    return updateObject(state, {\r\n        leftControl: action.control\r\n    });\r\n}\r\n\r\nconst setRightControl = (state, action) => {\r\n    return updateObject(state, {\r\n        rightControl: action.control\r\n    });\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.SET_UP_CONTROL: return setUpControl(state, action);\r\n        case actionTypes.SET_DOWN_CONTROL: return setDownControl(state, action);\r\n        case actionTypes.SET_LEFT_CONTROL: return setLeftControl(state, action);\r\n        case actionTypes.SET_RIGHT_CONTROL: return setRightControl(state, action);\r\n        default: return state;\r\n    }\r\n}\r\n\r\nexport default reducer;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware, compose, combineReducers } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport gameReducer from './store/reducers/gameReducer';\r\nimport controlsReducer from './store/reducers/controlsReducer';\r\n\r\nconst rootReducer = combineReducers({\r\n  game: gameReducer,\r\n  controls: controlsReducer\r\n});\r\n\r\nconst store = createStore(rootReducer, compose(\r\n  applyMiddleware(thunk)\r\n));\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <React.StrictMode>\r\n        <App />\r\n      </React.StrictMode>\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}